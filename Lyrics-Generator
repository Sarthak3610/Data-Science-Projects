text_path = "Apna Time Aayega.txt"
def load_text(filename):
    with open(filename, encoding = 'utf8') as f:
        return f.read().lower()
text = load_text(text_path)
print(text)

def generateTable(data, k = 4):
    T = {}
    for i in range(len(data) - k):
        x = data[i:i+k]
        y = data[i+k]
        #print("x %s and y %s" %(x,y))
        if T.get(x) is None:
            T[x] = {}
            T[x][y] = 1
        else:
            if T[x].get(y) is None:
                T[x][y] = 1
            else:
                T[x][y] += 1
    return T

def convert(T):
    for kx in T.keys():
        s = float(sum(T[kx].values()))
        for k in T[kx].keys():
            T[kx][k] = T[kx][k]/s
    return T

def trainmarkov(text, k=4):
    T = generateTable(text)
    T =  convert(T)
    return T

model = trainmarkov(text)

import numpy as np
np.random.seed(11)

def sample_next(ctx, T, k):
    ctx = ctx[-k:]
    if T.get(ctx) is None:
        return " "
    possible_chars = list(T[ctx].keys())
    possible_values = list(T[ctx].values())
    return np.random.choice(possible_chars, p = possible_values)

sample_next("apna", model, 4)
def generatetext(starting_sent, k, maxlen = 2000):
    sentence = starting_sent
    ctx = starting_sent[-k:]
    for ix in range(maxlen):
        next_prediction = sample_next(ctx, model, k)
        sentence += next_prediction
        ctx = sentence[-k:]
    return sentence

sent = generatetext("apna", 4)
print(sent)

file = open("apna.txt", 'w', encoding = "utf8")
file.write(sent)
file.close()
