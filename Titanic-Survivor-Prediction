import numpy as np
import pandas as pd

dfx = pd.read_csv('Trainoddoneout.csv')
y_train = dfx["survived"]
#print(y_train)
dfy = pd.read_csv('Testtitanic.csv')
dfx.sample()

columns_to_drop = ["name", "ticket", "fare", "cabin", "embarked", "home.dest", "boat", "body"]
data_clean = dfx.drop(columns_to_drop, axis = 1)
data_clean.head()

data = dfy.drop(columns_to_drop, axis = 1)
data.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data_clean["sex"] = le.fit_transform (data_clean["sex"])
data_clean.sample()

data["sex"] = le.fit_transform (data["sex"])
data.info()

data_cleaned = data_clean.fillna(data_clean["age"].mean())
data_cleaned.info()

data_cleed = data.fillna(data["age"].mean())
data_cleed.info()

input_cols = ["pclass", "sex", "age", "sibsp", "parch"]
output_cols = ["survived"]
x = data_cleaned[input_cols]
y = data_cleaned[output_cols]
z = data_cleed[input_cols]
print(z.shape)
print(x.shape)

def entropy(col):
    count = np.unique(col, return_counts = True)
    n = float(col.shape[0])
    ent = 0.0
    for i in count[1]:
        p = i/n
        ent += (-1.0*p*np.log2(p))
    return ent

def divide_data(x_data, fkey, fval):
    x_right = pd.DataFrame([], columns = x_data.columns)
    x_left = pd.DataFrame([], columns = x_data.columns)
    for i in range(x_data.shape[0]):
        val = x_data[fkey].loc[i]
        if val > fval:
            x_right = x_right.append(x_data.loc[i])
        else:
            x_left = x_left.append(x_data.loc[i])
    return x_left, x_right

x_left, x_right = divide_data(data_clean[:10], "sex", 0.5)
print(x_left)
print(x_right)

def info_gain(x_data, fkey, fval):
    left, right = divide_data(x_data, fkey, fval)
    l = float(left.shape[0]/x_data.shape[0])
    r = float(right.shape[0]/x_data.shape[0])
    if left.shape[0] == 0 or right.shape[0] == 0:
        return -10000000 #min info gain
    i_gain = entropy(x_data.survived) - (l*entropy(left.survived) + r*entropy(right.survived)) 
    return i_gain

for fx in x.columns:
    print(fx)
    print(info_gain(data_cleaned, fx, data_cleaned[fx].mean()))

class DecisionTree:
    def __init__(self, depth = 0, max_depth = 5):
        self.left = None
        self.right = None
        self.fkey = None
        self.fval = None
        self.depth = depth
        self.max_depth = max_depth
        self.target = None
    def train(self, x_train):
        features = ["pclass", "sex", "age", "sibsp", "parch"]
        info_gains = []
        for fx in features:
            i_gain = info_gain(x_train, fx, x_train[fx].mean())
            info_gains.append(i_gain)
        self.fkey = features[np.argmax(info_gains)]
        self.val = x_train[self.fkey].mean()
        print("makin tree feature is",self.fkey)
        data_left, data_right = divide_data(x_train, self.fkey, self.fval)
        data_left = data_left.reset_index(drop = True)
        data_right = data_right.reset_index(drop = True)
        #truly a leaf node
        if data_left.shape[0] == 0 or data_right.shape[0] == 0:
            if x_train.survived.mean() >= 0.5:
                self.target = "survive"
            else:
                self.target = "dead"
            return
        #stop early whendepth >= max depth
        if(self.depth >= self.max_depth):
            if x_train.survived.mean() >= 0.5:
                self.target = "survive"
            else:
                self.target = "dead"
            return
        #recursive case
        self.left = DecisionTree(depth = self.depth + 1, max_depth = self.max_depth)
        self.left.train(data_left)
        self.right = DecisionTree(depth = self.depth + 1, max_depth = self.max_depth)
        self.right.train(data_right)
        #you can set atrget at every node
        if x_train.survived.mean() >= 0.5:
            if x_train.survived.mean() >= 0.5:
                self.target = "survive"
            else:
                self.target = "dead"

from sklearn.tree import DecisionTreeClassifier
sk = DecisionTreeClassifier(criterion = 'entropy', max_depth = 5)
sk.fit(x, y)
arr = sk.predict(z)
print(arr)
df = pd.DataFrame(arr)
df.columns = ['survived']
df.to_csv('submission_titanic.csv', encoding = 'utf-8')
