import gensim
from gensim.models import word2vec
from gensim.models import KeyedVectors
from sklearn.metrics.pairwise import cosine_similarity

keyed_vectors = KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary = True, encoding = 'utf-8')

v =  keyed_vectors["apple"]
v1 =  keyed_vectors["mango"]
print(v.shape)

l = cosine_similarity([v], [v1])
print(l)

import pandas as pd
import numpy as np

dfx = pd.read_csv('Test.csv')
X = dfx.values
#x = X[1:20,:]
#m = x.shape[0]
#print(m)
print(X.shape)
#for i in range (x.shape:
    #print(i)
    
y = X[1]
y[-1]
#print(keyed_vectors['apple'])

def odd_one_out(lst):
    all_word_vectors = [keyed_vectors[w] for w in lst]
    avg_vector = np.mean(all_word_vectors, axis = 0)
    #print(avg_vector.shape)
   
    odd_one_out = None
    min_similarity = 1.0
    for w in lst:
        #a = np.array(keyed_vectors[w])
        #b = np.array(avg_vector)
        #print(b)
        sim = cosine_similarity([keyed_vectors[w]], [avg_vector])
        
        if sim < min_similarity:
            min_similarity = sim
            odd_one_out = w
    return odd_one_out

m = X.shape[0]
arr = []
for i in range(m):
    l = odd_one_out(X[i])
    arr.append(l)
print(arr)

df = pd.DataFrame(arr)
df.columns = ['oddoneout']
df.to_csv('submission_odd_one_out.csv', encoding = 'utf-8', index = False)
